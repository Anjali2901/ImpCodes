#include <stdio.h>
#include <string.h>

struct node {
	int a;	//node1
	int b;	//node2
	int c;	//weight
}arr[100005];

int mark[10005];
int res[100005];
int adj[1000][1000];
int dis[1000];
int fin;
int k;
int findp(int a, int par[]) {
	if(par[a] == a) {
		return a;
	}
	return (par[a] = findp(par[a], par));
}
int checkTree(int m, int n) {
	int par[n];
	int i;
	for(i = 1; i <= n; i++) {
		par[i] = i;
	}
	for(i = 1; i < n; i++) {
		int pa = findp(arr[mark[i]].a, par);
		int pb = findp(arr[mark[i]].b, par);
		if(pa == pb) {
			return 0;
		}
		par[pa] = pb;
	}
	return 1;
}
void dfs(int node, int pa, int n, int val) {
	dis[node] = val;
	int i;
	for(i = 1; i <= n; i++) {
		if(adj[node][i] && i != pa) {
			dfs(i, node, n, val + adj[node][i]);
		}
	}
}
int findDis(int m, int n) {
	int edge[n + 1];
	int i, j;
	for(i = 1; i <= n; i++) {
		edge[i] = 0;
		for(j = 1; j <= n; j++) {
			adj[i][j] = 0;
		}
	}

	for(i = 1; i < n; i++) {
		adj[arr[mark[i]].a][arr[mark[i]].b] = arr[mark[i]].c;
		adj[arr[mark[i]].b][arr[mark[i]].a] = arr[mark[i]].c;
		edge[arr[mark[i]].a]++;
		edge[arr[mark[i]].b]++;
	}
	int c = 0;
	for(i = 1; i <= n; i++) {
		if(edge[i] == 1) {
			c++;
		}
	}
	if(c != k) {
		return -1;
	}
	int sum = 0;
	for(i = 1; i <= n; i++) {
		if(edge[i] == 1) {
			for(j = 1; j <= n; j++) {
				dis[i] = 0;
			}
			dfs(i, 0, n, 0);

			for(j = 1; j <= n; j++) {
				if(edge[j] == 1) {
					sum+=dis[j];
				}
			}
		}
	}
	return sum;
}
void calc(int id, int id2, int m, int n) {
	if(id2 == n) {
		if(checkTree(m, n)) {
			int dis = findDis(m, n);
			if(dis == -1) {
				return;
			}
			if(dis < fin) {
				fin = dis;
				int i;
				for(i = 1; i < n; i++) {
					res[i] = mark[i];
				}
			}
		}
		return;
	}
	if(id == m + 1) {
		return;
	}
	calc(id + 1, id2, m, n);
	mark[id2] = id;
	calc(id + 1, id2 + 1, m, n);
}
int main() {
	int n, m;
	fin = 1000000000;
	scanf("%d %d %d", &n, &m, &k);
	int i, j;
	for(i = 1; i <= m; i++) {
		scanf("%d %d %d", &arr[i].a, &arr[i].b, &arr[i].c);
	}
	calc(1, 1, m, n);
	if(fin == 1000000000) {
		printf("Not possible\n");
		return 0;
	}
	printf("Minimum sum : %d\n", fin);
	printf("Edges in Graph:\n");
	for(i = 1; i < n; i++) {
		printf("%d %d %d\n", arr[res[i]].a, arr[res[i]].b, arr[res[i]].c);
	}
	return 0;
}
